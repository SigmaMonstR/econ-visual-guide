library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
beaSearch('Final sales of computers', beaKey, asHtml = TRUE)
beaSearch('Final sales of computers', beaKey, asHtml = TRUE)
beaSearch('Final sales of computers to domestic purchasers', beaKey, asHtml = TRUE)
beaSearch('Final sales of computers to domestic purchasers', beaKey)
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
knitr::kable(beaSearch('Final sales of computers to domestic purchasers', beaKey)[1], booktab = TRUE)
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
knitr::kable(t(beaSearch('Final sales of computers to domestic purchasers', beaKey)[1:2]), booktab = TRUE)
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
'UserID' = beaKey ,
beaSpecs <- list(
'UserID' = beaKey,
'Method' = 'GetData',
'datasetname' = 'NIPA',
'TableID' = '15',
'Frequency' = 'Q',
'Year' = 'X',
'ResultFormat' = 'json'
)
beaPayload <- beaGet(beaSpecs);
View(beaPayload)
beaSearch('Personal Consumption Expenditures', beaKey)
knitr::kable(t(beaSearch('Personal Consumption Expenditures', beaKey)[1:2]), booktab = TRUE, caption = "Example results from through search interface.")
beaSpecs <- list(
'UserID' = beaKey,
'Method' = 'GetData',
'datasetname' = 'NIPA',
'TableID' = '1',
'Frequency' = 'Q',
'Year' = 'X',
'ResultFormat' = 'json'
)
beaPayload <- beaGet(beaSpecs);
View(beaPayload)
df <- beaGet(specs);
specs <- list(
'UserID' = beaKey,
'Method' = 'GetData',
'datasetname' = 'NIPA',
'TableID' = '1',
'Frequency' = 'Q',
'Year' = 'X',
'ResultFormat' = 'json'
)
df <- beaGet(specs);
head(df, 1)
specs <- list(
'UserID' = beaKey,
'Method' = 'GetData',
'datasetname' = 'NIPA',
'TableID' = '1',
'Frequency' = 'Q',
'Year' = '2010,2012,2013,2014',
'ResultFormat' = 'json'
)
df <- beaGet(specs);
head(df, 1)
df <- beaGet(specs, asWide = FALSE);
specs <- list(
'UserID' = beaKey,
'Method' = 'GetData',
'datasetname' = 'NIPA',
'TableID' = '1',
'Frequency' = 'Q',
'Year' = '2010,2012,2013,2014',
'ResultFormat' = 'json'
)
df <- beaGet(specs);
df <- beaGet(specs, asWide = FALSE);
df
df <- beaGet(specs, iTableStyle = FALSE;
df <- beaGet(specs, iTableStyle = FALSE);
df
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
library(dygraphs)
dygraph(lungDeaths)
library(dygraphs)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
mdeaths
fdeaths
str(mdeaths)
library(plotly)
dat <- data.frame(
time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(14.89, 17.23)
)
p <- ggplot(data=dat, aes(x=time, y=total_bill)) +
geom_bar(stat="identity")
p <- ggplotly(p)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="geom_bar/bar-chart")
library(xts)
pcinc_regional <- beaGet(
list(
userid   = beaKey,
method   = 'getdata',
linecode   = '3',
tablename  = 'CA1',
frequency  = 'a',
datasetname = 'regionalincome',
year     = 'all',
geofips   = 'state'
), iTableStyle = FALSE,
)
View(pcinc_regional)
specs <- list(
'UserID' = beaKey,
'Method' = 'GetData',
'datasetname' = 'NIPA',
'TableID' = '1',
'Frequency' = 'Q',
'Year' = '2010,2012,2013,2014',
'ResultFormat' = 'json'
)
y <- beaGet(specs, iTableStyle = FALSE)
specs <- list(
'UserID' = beaKey,
'Method' = 'GetData',
'datasetname' = 'NIPA',
'TableID' = '1',
'Frequency' = 'Q',
'Year' = 'X',
'ResultFormat' = 'json'
)
y <- beaGet(specs, iTableStyle = FALSE)
df <- beaGet(specs, iTableStyle = FALSE)
head(df)
df <- beaGet(specs, iTableStyle = FALSE)
xt <- xts(x = df[,1], order.by = df$TimePeriod)
specs <- list(
'UserID' = beaKey,
'Method' = 'GetData',
'datasetname' = 'NIPA',
'TableID' = '1',
'Frequency' = 'A',
'Year' = 'X',
'ResultFormat' = 'json'
)
df <- beaGet(specs, iTableStyle = FALSE)
xt <- xts(x = df[,1], order.by = as.date(df$TimePeriod, "%Y"))
xt <- xts(x = df[,1], order.by = as.Date(df$TimePeriod, "%Y"))
dygraph(xt)
df <- beaGet(specs, iTableStyle = FALSE)
xt1 <- xts(x = df[,1], order.by = as.Date(df$TimePeriod, "%Y"))
xt2 <- xts(x = df[,2], order.by = as.Date(df$TimePeriod, "%Y"))
dygraph(xt1, group = "lung-deaths")
dygraph(xt2, group = "lung-deaths")
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
dygraph(xt1, group = "compare")
dygraph(xt2, group = "compare")
dygraph(xt1, group = "compare") %>% dyBarChart()
dyBarChart <- function(dygraph) {
dyPlotter(dygraph = dygraph,
name = "BarChart",
path = system.file("plotters/barchart.js",
package = "dygraphs"))
}
dygraph(xt1, group = "compare") %>% dyBarChart()
dygraph(xt2, group = "compare") %>% dyBarChart()
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
library(bea.R)
library(leaflet)
library(sp)
beaKey =  readLines("/Users/jeff/Documents/keys/beaKey.txt")
#Personal Income Per Capita
pcinc_regional <- beaGet(
list(
userid   = beaKey,
method   = 'getdata',
linecode   = '3',
tablename  = 'CA1',
frequency  = 'a',
datasetname = 'regionalincome',
year     = 'all',
geofips   = 'state'
)
)
library(bea.R)
library(leaflet)
library(sp)
beaKey =  readLines("/Users/jeff/Documents/keys/beaKey.txt")
#Personal Income Per Capita
pcinc_regional <- beaGet(
list(
userid   = beaKey,
method   = 'getdata',
linecode   = '3',
tablename  = 'CA1',
frequency  = 'a',
datasetname = 'regionalincome',
year     = 'all',
geofips   = 'state'
)
)
#Consumer Spending
pcpce <- beaGet(
list(
UserID = beaKey,
Method = 'GetData',
DatasetName = 'RegionalProduct',
Component = 'PCPCE_SAN',
IndustryID = '1' ,
year = 'all',
geofips = 'state',
frequency = 'a'
)
)
pcpce$pcpce.growth <- 100 * (pcpce$DataValue_2016/pcpce$DataValue_2015 - 1)
pcpce$STATEFP <- substr(pcpce$GeoFips,1,2)
pcpce <- pcpce[, c("STATEFP", "pcpce.growth")]
pcinc_regional$pcinc_growth <- 100 * (pcinc_regional$DataValue_2016/pcinc_regional$DataValue_2015 - 1)
pcinc_regional$STATEFP <- substr(pcinc_regional$GeoFips,1,2)
pcinc_regional <- pcinc_regional[, c("STATEFP", "pcinc_growth")]
pcinc_regional <- merge(pcinc_regional, pcpce, by = "STATEFP")
library(rgdal)
getShape <- function(url){
# Download, unzip and load shapefile from URL
#
# Args:
#   url = URL to zip file containing shapefile
#
# Returns:
#
#   Loaded shapefile
#Create temp objects
temp_dir <- tempdir()
temp_file <- tempfile()
#Download and unzip file
download.file(url, temp_file,method="libcurl")
unzip(temp_file, exdir = temp_dir)
#Load shapefile
file_prefix <- grep("*\\.shp$",list.files(temp_dir), value = TRUE)
file_prefix <- gsub("\\.shp", "", file_prefix)
return(readOGR(temp_dir, layer = file_prefix, verbose = FALSE))
}
# Get Shapefile
states <- getShape("http://www2.census.gov/geo/tiger/GENZ2016/shp/cb_2016_us_state_20m.zip")
states@data$STATEFP <- as.character(states@data$STATEFP)
states <- merge(states, pcinc_regional, by = "STATEFP")
states <- states[!is.na(states@data$pcinc_growth),]
## Setting Styles
library(RColorBrewer)
#Set up color palette
bins1 <- seq(floor(min(states@data$pcinc_growth)), ceiling(max(states@data$pcinc_growth)), 1)
pal1 <- colorBin("YlGnBu", domain = states@data$pcinc_growth, bins = bins1)
bins2 <- seq(floor(min(states@data$pcpce.growth)), ceiling(max(states@data$pcpce.growth)), 1)
pal2 <- colorBin("YlOrRd", domain = states@data$pcpce.growth, bins = bins2)
## Set labels
#Pop Up Label
labels <- sprintf(
"<strong>%s</strong><br> <small>Per Capita Growth (2015-16)<br>PI:<span style='font-size:12px;color:darkblue;font-weight:bold'>%g </span> percent <br> PCE: <span style='font-size:12px;color:darkblue;font-weight:bold'> %g </span> percent</small>",
states@data$NAME, round(states@data$pcinc_growth,2), round(states@data$pcpce.growth,2)) %>% lapply(htmltools::HTML)
#Set canvas
map_object <- leaflet(states, width = "100%", height = "500px") %>%
setView(-96.5, 37.7, 4)
#Add background
map_object <- map_object  %>%
addProviderTiles(provider = "CartoDB.Positron")
#Add data
map_object <- map_object %>%
addPolygons(group = "Personal Income",
fillColor = ~pal1(pcinc_growth), weight = 1, color = "white", fillOpacity = 0.5,
highlight = highlightOptions(
weight = 2, color = "#666", fillOpacity = 0.4),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto")) %>%
addPolygons(group = "Personal Consumption",
fillColor = ~pal2(pcpce.growth), weight = 1, color = "white", fillOpacity = 0.5,
highlight = highlightOptions(
weight = 2, color = "#666", fillOpacity = 0.4),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto"))
#Add Layer Controls
map_object <- map_object %>%
addLayersControl(
overlayGroups = c("Personal Income", "Personal Consumption")
)
#Render
map_object
plot(states[[1]])
plot(states[[1]])
plot(states[1])
plot(states[,1])
plot(states[,,1])
str(states)
str(states@polygons[[1]])
plot(states@polygons[[1]])
plot(states@polygons[1])
plot(states@polygons[,1])
plot(states@polygons)
plot(states[[2]])
plot(states[3)
plot(states[3])
plot(states[3])
setwd("/Users/jeff/Documents/Github/map-example")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
library(bea.R)
library(leaflet)
library(sp)
beaKey =  readLines("/Users/jeff/Documents/keys/beaKey.txt")
#Personal Income Per Capita
pcinc_regional <- beaGet(
list(
userid   = beaKey,
method   = 'getdata',
linecode   = '3',
tablename  = 'CA1',
frequency  = 'a',
datasetname = 'regionalincome',
year     = 'all',
geofips   = 'state'
)
)
pcinc_regional$pcinc_growth <- 100 * (pcinc_regional$DataValue_2016/pcinc_regional$DataValue_2015 - 1)
pcinc_regional$STATEFP <- substr(pcinc_regional$GeoFips,1,2)
pcinc_regional <- pcinc_regional[, c("STATEFP", "pcinc_growth")]
library(rgdal)
getShape <- function(url){
# Download, unzip and load shapefile from URL
#
# Args:
#   url = URL to zip file containing shapefile
#
# Returns:
#
#   Loaded shapefile
#Create temp objects
temp_dir <- tempdir()
temp_file <- tempfile()
#Download and unzip file
download.file(url, temp_file,method="libcurl")
unzip(temp_file, exdir = temp_dir)
#Load shapefile
file_prefix <- grep("*\\.shp$",list.files(temp_dir), value = TRUE)
file_prefix <- gsub("\\.shp", "", file_prefix)
return(readOGR(temp_dir, layer = file_prefix, verbose = FALSE))
}
# Get Shapefile
states <- getShape("http://www2.census.gov/geo/tiger/GENZ2016/shp/cb_2016_us_state_20m.zip")
states@data$STATEFP <- as.character(states@data$STATEFP)
states <- merge(states, pcinc_regional, by = "STATEFP")
states <- states[!is.na(states@data$pcinc_growth),]
## Setting Styles
library(RColorBrewer)
#Set up color palette
bins1 <- seq(floor(min(states@data$pcinc_growth)), ceiling(max(states@data$pcinc_growth)), 1)
pal1 <- colorBin("YlGnBu", domain = states@data$pcinc_growth, bins = bins1)
## Set labels
#Pop Up Label
labels <- sprintf(
"<strong>%s</strong><br> <small>Per Capita Growth (2015-16)<br>PI:<span style='font-size:12px;color:darkblue;font-weight:bold'>%g </span> percent",
states@data$NAME, round(states@data$pcinc_growth,2)) %>% lapply(htmltools::HTML)
#Set canvas
map_object <- leaflet(states, width = "100%", height = "500px") %>%
setView(-96.5, 37.7, 4)
#Add background
map_object <- map_object  %>%
addProviderTiles(provider = "CartoDB.Positron")
#Add data
map_object <- map_object %>%
addPolygons(group = "Personal Income",
fillColor = ~pal1(pcinc_growth), weight = 1, color = "white", fillOpacity = 0.5,
highlight = highlightOptions(
weight = 2, color = "#666", fillOpacity = 0.4),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto")) %>%
#Render
map_object
#Add data
map_object <- map_object %>%
addPolygons(group = "Personal Income",
fillColor = ~pal1(pcinc_growth), weight = 1, color = "white", fillOpacity = 0.5,
highlight = highlightOptions(
weight = 2, color = "#666", fillOpacity = 0.4),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto"))
#Render
map_object
map_object <- map_object %>%
addPolygons(group = "Personal Income",
fillColor = ~pal1(pcinc_growth), weight = 1, color = "white", fillOpacity = 0.5,
highlight = highlightOptions(
weight = 2, color = "#666", fillOpacity = 0.9),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto"))
#Render
map_object
library(bea.R)
library(leaflet)
library(sp)
beaKey =  readLines("/Users/jeff/Documents/keys/beaKey.txt")
#Personal Income Per Capita
pcinc_regional <- beaGet(
list(
userid   = beaKey,
method   = 'getdata',
linecode   = '3',
tablename  = 'CA1',
frequency  = 'a',
datasetname = 'regionalincome',
year     = 'all',
geofips   = 'state'
)
)
pcinc_regional$pcinc_growth <- 100 * (pcinc_regional$DataValue_2016/pcinc_regional$DataValue_2015 - 1)
pcinc_regional$STATEFP <- substr(pcinc_regional$GeoFips,1,2)
pcinc_regional <- pcinc_regional[, c("STATEFP", "pcinc_growth")]
library(rgdal)
getShape <- function(url){
# Download, unzip and load shapefile from URL
#
# Args:
#   url = URL to zip file containing shapefile
#
# Returns:
#
#   Loaded shapefile
#Create temp objects
temp_dir <- tempdir()
temp_file <- tempfile()
#Download and unzip file
download.file(url, temp_file,method="libcurl")
unzip(temp_file, exdir = temp_dir)
#Load shapefile
file_prefix <- grep("*\\.shp$",list.files(temp_dir), value = TRUE)
file_prefix <- gsub("\\.shp", "", file_prefix)
return(readOGR(temp_dir, layer = file_prefix, verbose = FALSE))
}
# Get Shapefile
states <- getShape("http://www2.census.gov/geo/tiger/GENZ2016/shp/cb_2016_us_state_20m.zip")
states@data$STATEFP <- as.character(states@data$STATEFP)
states <- merge(states, pcinc_regional, by = "STATEFP")
states <- states[!is.na(states@data$pcinc_growth),]
## Setting Styles
library(RColorBrewer)
#Set up color palette
bins1 <- seq(floor(min(states@data$pcinc_growth)), ceiling(max(states@data$pcinc_growth)), 1)
pal1 <- colorBin("YlGnBu", domain = states@data$pcinc_growth, bins = bins1)
## Set labels
#Pop Up Label
labels <- sprintf(
"<strong>%s</strong><br> <small>Per Capita Growth (2015-16)<br>PI:<span style='font-size:12px;color:darkblue;font-weight:bold'>%g </span> percent",
states@data$NAME, round(states@data$pcinc_growth,2)) %>% lapply(htmltools::HTML)
#Set canvas
map_object <- leaflet(states, width = "100%", height = "500px") %>%
setView(-96.5, 37.7, 5)
#Add background
map_object <- map_object  %>%
addProviderTiles(provider = "CartoDB.Positron")
#Add data
map_object <- map_object %>%
addPolygons(group = "Personal Income",
fillColor = ~pal1(pcinc_growth), weight = 1, color = "white", fillOpacity = 0.5,
highlight = highlightOptions(
weight = 2, color = "#666", fillOpacity = 0.9),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto"))
#Render
map_object
