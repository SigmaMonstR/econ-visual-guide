building$housenum<-substring(building$location,1,regexpr(" ",building$location))
building$st<-substring(building$location,regexpr(" ",building$location)+1,regexpr(",",building$location)-1)
building$boro<-substring(building$location,regexpr(",",building$location)+1,regexpr("$",building$location))
building$boro[which(trim(building$boro)=="QN")]<-"Queens"
building$boro[which(trim(building$boro)=="MN")]<-"Manhattan"
building$boro[which(trim(building$boro)=="BK")]<-"Brooklyn"
building$boro[which(trim(building$boro)=="BX")]<-"Bronx"
building$boro[which(trim(building$boro)=="SI")]<-"Staten Island"
intersection<-pre[pre$type=="Intersection",]
##No Result Error sheet
no_result<-as.data.frame(cbind("","","",""))
colnames(no_result)<-c("id","location","type","result")
no_result<-no_result[0:0,]
##Results for Building sheet
results<-as.data.frame(cbind("","","","","","","","","","","","",""))
colnames(results)<-c("id","location","type","result","bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber","fireCompanyType","firstBoroughName","firstStreetNameNormalized","xCoordinate","yCoordinate")
results<-results[0:0,]
##Results for Intersection
results2<-as.data.frame(cbind("","","","","","","","","","","",""))
colnames(results2)<-c("id","location","type","result","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")
results2<-results2[0:0,]
##BUILDING GEOCODER
if(nrow(building)==0){
print("No Building Address Data")
} else {
for(i in 1:nrow(building)){
print(paste("Buildings: ",round(100*i/nrow(building),1),"%",sep=""))
text<-paste("https://api.cityofnewyork.us/geoclient/v1/address.xml?houseNumber=",trim(building$housenum[i]),"&street=",gsub(" ","+",trim(building$st[i])),"&borough=",gsub(" ","+",trim(building$boro[i])),"&app_id=",app_id,"&app_key=",key,sep="")
data <- xmlParse(getURL(text, ssl.verifypeer = FALSE))
temp<-ldply(xmlToList(data), function(x) { data.frame(x) } )
##BBL and BIN Present, No Coordinate
if(ncol(temp)>30 & dim(table(colnames(temp)=="bbl"))>1& dim(table(colnames(temp)=="buildingIdentificationNumber"))>1 & dim(table(colnames(temp)=="yCoordinate"))==1){
temp2<-temp[c("bbl","buildingIdentificationNumber")]
temp2<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","geocoded--bbl/bin only",temp2)))
colnames(temp2)<-c("id","location","type","result","bbl","buildingIdentificationNumber")
results<-rbind.fill(results,temp2)
rm(temp,temp2)
print(paste("Geocoded Building ID=",building$id[i],sep=""))
##BBL, BIN, XY Present
} else if(ncol(temp)>30 & dim(table(colnames(temp)=="bbl"))>1& dim(table(colnames(temp)=="buildingIdentificationNumber"))>1 & dim(table(colnames(temp)=="yCoordinate"))>1){
temp2<-temp[c("bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized",
"xCoordinate","yCoordinate")]
temp2<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","geocoded",temp2)))
colnames(temp2)<-c("id","location","type","result","bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber","fireCompanyType","firstBoroughName","firstStreetNameNormalized","xCoordinate","yCoordinate")
results<-rbind.fill(results,temp2)
rm(temp,temp2)
print(paste("Geocoded Building ID=",building$id[i],sep=""))
##No Result
} else {
temp<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","no result")))
colnames(temp)<-c("id","location","type","result")
no_result<-rbind(no_result,temp)
rm(temp)
print(paste("No Result for Building ID=",building$id[i],sep=""))
}
}
}
geocoded_final<-rbind.fill(results,results2,no_result)
##INTERSECTION GEOCODER
if(nrow(intersection)==0){
print("No Intersection Data")
} else {
intersection$street1 <- trim(lapply(strsplit(as.character(intersection$location), "[+-/&]"), "[", 1))
intersection$street2 <- trim(lapply(strsplit(as.character(intersection$location), "[+-/&]"), "[", 2))
intersection$borough <- trim(substring(intersection$location,regexpr(",",intersection$location)+1,regexpr("$",intersection$location)))
for(i in 1:nrow(intersection)){
print(paste("Intersections: ",round(100*i/nrow(building),1),"%",sep=""))
data <- xmlParse(getURL(paste("https://api.cityofnewyork.us/geoclient/v1/intersection.xml?app_id=",app_id,"&app_key=",
key,"&crossStreetOne=",gsub(" ","+",intersection$street1[i]),"&crossStreetTwo=",
gsub(" ","+",intersection$street2[i]),"&borough=",
gsub(" ","+",intersection$borough[i]),sep=""), ssl.verifypeer = FALSE))
temp<-ldply(xmlToList(data), function(x) { data.frame(x) } )
if(ncol(temp)>20&& dim(table(colnames(temp)=="communityDistrict"))>1 && dim(table(colnames(temp)=="yCoordinate"))>1){
temp<-temp[c("communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")]
temp<-as.data.frame(as.matrix(cbind(intersection$id[i],paste(intersection$street1[i]," & ", intersection$street2[i],", ",intersection$borough[i],sep=""),"intersection","geocoded",temp)))
colnames(temp)<-c("id","location","type","result","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")
results2<-rbind(results2,temp)
rm(temp)
print(paste("Geocoded Intersection ID=",intersection$id[i],sep=""))
} else {
temp<-as.data.frame(as.matrix(cbind(intersection$id[i],paste(intersection$street1[i]," & ", intersection$street2[i],", ",intersection$borough[i],sep=""),"intersection","no result")))
colnames(temp)<-c("id","location","type","result")
no_result<-rbind(no_result,temp)
rm(temp)
print(paste("No Result for Intersection ID=",intersection$id[i],sep=""))
}
}
}
geocoded_final<-rbind.fill(results,results2,no_result)
}
for(i in 91:1000){
print(paste("ITERATION: ",i,sep=""))
team_short<-team[which(team$rand==i),1:2]
temp<-fd_geocode(team_short,"id","location","89ac2c7c","c394f82e5e39718e2a46a191a7579af2")
values<-rbind.fill(values,temp)
}
}
P
fd_geocode<-function(df,id,location,app_id,key){
pre<-df
##PARSE INTO INTERSECTION VERSUS ADDRESS
pre$location<-toupper(pre$location)
pre$type<-"Building"
pre$type[which(regexpr("/",pre$location)>0 | regexpr("&",pre$location)>0)]<-"Intersection"
pre$location<-gsub("&&"," & ",pre$location)
pre$location<-gsub("&"," & ",pre$location)
pre$location<-gsub("\\s+"," ",pre$location)
pre$location<-gsub("\\s([-])\\s","-",pre$location)
pre$location<-gsub("([-])\\s","-",pre$location)
pre$location<-gsub("\\s([-])","-",pre$location)
building<-pre[pre$type=="Building",]
building$housenum<-substring(building$location,1,regexpr(" ",building$location))
building$st<-substring(building$location,regexpr(" ",building$location)+1,regexpr(",",building$location)-1)
building$boro<-substring(building$location,regexpr(",",building$location)+1,regexpr("$",building$location))
building$boro[which(trim(building$boro)=="QN")]<-"Queens"
building$boro[which(trim(building$boro)=="MN")]<-"Manhattan"
building$boro[which(trim(building$boro)=="BK")]<-"Brooklyn"
building$boro[which(trim(building$boro)=="BX")]<-"Bronx"
building$boro[which(trim(building$boro)=="SI")]<-"Staten Island"
intersection<-pre[pre$type=="Intersection",]
##No Result Error sheet
no_result<-as.data.frame(cbind("","","",""))
colnames(no_result)<-c("id","location","type","result")
no_result<-no_result[0:0,]
##Results for Building sheet
results<-as.data.frame(cbind("","","","","","","","","","","","",""))
colnames(results)<-c("id","location","type","result","bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber","fireCompanyType","firstBoroughName","firstStreetNameNormalized","xCoordinate","yCoordinate")
results<-results[0:0,]
##Results for Intersection
results2<-as.data.frame(cbind("","","","","","","","","","","",""))
colnames(results2)<-c("id","location","type","result","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")
results2<-results2[0:0,]
##BUILDING GEOCODER
if(nrow(building)==0){
print("No Building Address Data")
} else {
for(i in 1:nrow(building)){
print(paste("Buildings: ",round(100*i/nrow(building),1),"%",sep=""))
text<-paste("https://api.cityofnewyork.us/geoclient/v1/address.xml?houseNumber=",trim(building$housenum[i]),"&street=",gsub(" ","+",trim(building$st[i])),"&borough=",gsub(" ","+",trim(building$boro[i])),"&app_id=",app_id,"&app_key=",key,sep="")
data <- xmlParse(getURL(text, ssl.verifypeer = FALSE))
temp<-ldply(xmlToList(data), function(x) { data.frame(x) } )
##BBL and BIN Present, No Coordinate
if(ncol(temp)>30 & dim(table(colnames(temp)=="bbl"))>1& dim(table(colnames(temp)=="buildingIdentificationNumber"))>1 & dim(table(colnames(temp)=="yCoordinate"))==1){
temp2<-temp[c("bbl","buildingIdentificationNumber")]
temp2<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","geocoded--bbl/bin only",temp2)))
colnames(temp2)<-c("id","location","type","result","bbl","buildingIdentificationNumber")
results<-rbind.fill(results,temp2)
rm(temp,temp2)
print(paste("Geocoded Building ID=",building$id[i],sep=""))
##BBL, BIN, XY Present
} else if(ncol(temp)>30 & dim(table(colnames(temp)=="bbl"))>1& dim(table(colnames(temp)=="buildingIdentificationNumber"))>1 & dim(table(colnames(temp)=="yCoordinate"))>1){
temp2<-temp[c("bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized",
"xCoordinate","yCoordinate")]
temp2<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","geocoded",temp2)))
colnames(temp2)<-c("id","location","type","result","bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber","fireCompanyType","firstBoroughName","firstStreetNameNormalized","xCoordinate","yCoordinate")
results<-rbind.fill(results,temp2)
rm(temp,temp2)
print(paste("Geocoded Building ID=",building$id[i],sep=""))
##No Result
} else {
temp<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","no result")))
colnames(temp)<-c("id","location","type","result")
no_result<-rbind(no_result,temp)
rm(temp)
print(paste("No Result for Building ID=",building$id[i],sep=""))
}
}
}
geocoded_final<-rbind.fill(results,results2,no_result)
##INTERSECTION GEOCODER
if(nrow(intersection)==0){
print("No Intersection Data")
} else {
intersection$street1 <- trim(lapply(strsplit(as.character(intersection$location), "[+-/&]"), "[", 1))
intersection$street2 <- trim(lapply(strsplit(as.character(intersection$location), "[+-/&]"), "[", 2))
intersection$borough <- trim(substring(intersection$location,regexpr(",",intersection$location)+1,regexpr("$",intersection$location)))
for(i in 1:nrow(intersection)){
print(paste("Intersections: ",round(100*i/nrow(building),1),"%",sep=""))
data <- xmlParse(getURL(paste("https://api.cityofnewyork.us/geoclient/v1/intersection.xml?app_id=",app_id,"&app_key=",
key,"&crossStreetOne=",gsub(" ","+",intersection$street1[i]),"&crossStreetTwo=",
gsub(" ","+",intersection$street2[i]),"&borough=",
gsub(" ","+",intersection$borough[i]),sep=""), ssl.verifypeer = FALSE))
temp<-ldply(xmlToList(data), function(x) { data.frame(x) } )
if(ncol(temp)>20&& dim(table(colnames(temp)=="communityDistrict"))>1 && dim(table(colnames(temp)=="yCoordinate"))>1){
temp<-temp[c("communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")]
temp<-as.data.frame(as.matrix(cbind(intersection$id[i],paste(intersection$street1[i]," & ", intersection$street2[i],", ",intersection$borough[i],sep=""),"intersection","geocoded",temp)))
colnames(temp)<-c("id","location","type","result","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")
results2<-rbind(results2,temp)
rm(temp)
print(paste("Geocoded Intersection ID=",intersection$id[i],sep=""))
} else {
temp<-as.data.frame(as.matrix(cbind(intersection$id[i],paste(intersection$street1[i]," & ", intersection$street2[i],", ",intersection$borough[i],sep=""),"intersection","no result")))
colnames(temp)<-c("id","location","type","result")
no_result<-rbind(no_result,temp)
rm(temp)
print(paste("No Result for Intersection ID=",intersection$id[i],sep=""))
}
}
}
geocoded_final<-rbind.fill(results,results2,no_result)
}
for(i in 91:1000){
print(paste("ITERATION: ",i,sep=""))
team_short<-team[which(team$rand==i),1:2]
temp<-fd_geocode(team_short,"id","location","89ac2c7c","c394f82e5e39718e2a46a191a7579af2")
values<-rbind.fill(values,temp)
}
dim(table(colnames(temp)=="yCoordinate"))
fd_geocode<-function(df,id,location,app_id,key){
pre<-df
##PARSE INTO INTERSECTION VERSUS ADDRESS
pre$location<-toupper(pre$location)
pre$type<-"Building"
pre$type[which(regexpr("/",pre$location)>0 | regexpr("&",pre$location)>0)]<-"Intersection"
pre$location<-gsub("&&"," & ",pre$location)
pre$location<-gsub("&"," & ",pre$location)
pre$location<-gsub("\\s+"," ",pre$location)
pre$location<-gsub("\\s([-])\\s","-",pre$location)
pre$location<-gsub("([-])\\s","-",pre$location)
pre$location<-gsub("\\s([-])","-",pre$location)
building<-pre[pre$type=="Building",]
building$housenum<-substring(building$location,1,regexpr(" ",building$location))
building$st<-substring(building$location,regexpr(" ",building$location)+1,regexpr(",",building$location)-1)
building$boro<-substring(building$location,regexpr(",",building$location)+1,regexpr("$",building$location))
building$boro[which(trim(building$boro)=="QN")]<-"Queens"
building$boro[which(trim(building$boro)=="MN")]<-"Manhattan"
building$boro[which(trim(building$boro)=="BK")]<-"Brooklyn"
building$boro[which(trim(building$boro)=="BX")]<-"Bronx"
building$boro[which(trim(building$boro)=="SI")]<-"Staten Island"
intersection<-pre[pre$type=="Intersection",]
##No Result Error sheet
no_result<-as.data.frame(cbind("","","",""))
colnames(no_result)<-c("id","location","type","result")
no_result<-no_result[0:0,]
##Results for Building sheet
results<-as.data.frame(cbind("","","","","","","","","","","","",""))
colnames(results)<-c("id","location","type","result","bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber","fireCompanyType","firstBoroughName","firstStreetNameNormalized","xCoordinate","yCoordinate")
results<-results[0:0,]
##Results for Intersection
results2<-as.data.frame(cbind("","","","","","","","","","","",""))
colnames(results2)<-c("id","location","type","result","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")
results2<-results2[0:0,]
##BUILDING GEOCODER
if(nrow(building)==0){
print("No Building Address Data")
} else {
for(i in 1:nrow(building)){
print(paste("Buildings: ",round(100*i/nrow(building),1),"%",sep=""))
text<-paste("https://api.cityofnewyork.us/geoclient/v1/address.xml?houseNumber=",trim(building$housenum[i]),"&street=",gsub(" ","+",trim(building$st[i])),"&borough=",gsub(" ","+",trim(building$boro[i])),"&app_id=",app_id,"&app_key=",key,sep="")
data <- xmlParse(getURL(text, ssl.verifypeer = FALSE))
temp<-ldply(xmlToList(data), function(x) { data.frame(x) } )
if(ncol(temp)>30 & dim(table(colnames(temp)=="bbl"))>1& dim(table(colnames(temp)=="buildingIdentificationNumber"))>1 & dim(table(colnames(temp)=="yCoordinate"))>1){
temp2<-temp[c("bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized",
"xCoordinate","yCoordinate")]
temp2<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","geocoded",temp2)))
colnames(temp2)<-c("id","location","type","result","bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber","fireCompanyType","firstBoroughName","firstStreetNameNormalized","xCoordinate","yCoordinate")
results<-rbind.fill(results,temp2)
rm(temp,temp2)
print(paste("Geocoded Building ID=",building$id[i],sep=""))
##No Result
} else {
temp<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","no result")))
colnames(temp)<-c("id","location","type","result")
no_result<-rbind(no_result,temp)
rm(temp)
print(paste("No Result for Building ID=",building$id[i],sep=""))
}
}
}
geocoded_final<-rbind.fill(results,results2,no_result)
##INTERSECTION GEOCODER
if(nrow(intersection)==0){
print("No Intersection Data")
} else {
intersection$street1 <- trim(lapply(strsplit(as.character(intersection$location), "[+-/&]"), "[", 1))
intersection$street2 <- trim(lapply(strsplit(as.character(intersection$location), "[+-/&]"), "[", 2))
intersection$borough <- trim(substring(intersection$location,regexpr(",",intersection$location)+1,regexpr("$",intersection$location)))
for(i in 1:nrow(intersection)){
print(paste("Intersections: ",round(100*i/nrow(building),1),"%",sep=""))
data <- xmlParse(getURL(paste("https://api.cityofnewyork.us/geoclient/v1/intersection.xml?app_id=",app_id,"&app_key=",
key,"&crossStreetOne=",gsub(" ","+",intersection$street1[i]),"&crossStreetTwo=",
gsub(" ","+",intersection$street2[i]),"&borough=",
gsub(" ","+",intersection$borough[i]),sep=""), ssl.verifypeer = FALSE))
temp<-ldply(xmlToList(data), function(x) { data.frame(x) } )
if(ncol(temp)>20&& dim(table(colnames(temp)=="communityDistrict"))>1 && dim(table(colnames(temp)=="yCoordinate"))>1){
temp<-temp[c("communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")]
temp<-as.data.frame(as.matrix(cbind(intersection$id[i],paste(intersection$street1[i]," & ", intersection$street2[i],", ",intersection$borough[i],sep=""),"intersection","geocoded",temp)))
colnames(temp)<-c("id","location","type","result","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")
results2<-rbind(results2,temp)
rm(temp)
print(paste("Geocoded Intersection ID=",intersection$id[i],sep=""))
} else {
temp<-as.data.frame(as.matrix(cbind(intersection$id[i],paste(intersection$street1[i]," & ", intersection$street2[i],", ",intersection$borough[i],sep=""),"intersection","no result")))
colnames(temp)<-c("id","location","type","result")
no_result<-rbind(no_result,temp)
rm(temp)
print(paste("No Result for Intersection ID=",intersection$id[i],sep=""))
}
}
}
geocoded_final<-rbind.fill(results,results2,no_result)
}
for(i in 91:1000){
print(paste("ITERATION: ",i,sep=""))
team_short<-team[which(team$rand==i),1:2]
temp<-fd_geocode(team_short,"id","location","89ac2c7c","c394f82e5e39718e2a46a191a7579af2")
values<-rbind.fill(values,temp)
}
View(temp)
View(temp)
for(i in 91:1000){
print(paste("ITERATION: ",i,sep=""))
team_short<-team[which(team$rand==i),1:2]
temp3<-fd_geocode(team_short,"id","location","89ac2c7c","c394f82e5e39718e2a46a191a7579af2")
values<-rbind.fill(values,temp3)
}
fd_geocode<-function(df,id,location,app_id,key){
pre<-df
##PARSE INTO INTERSECTION VERSUS ADDRESS
pre$location<-toupper(pre$location)
pre$type<-"Building"
pre$type[which(regexpr("/",pre$location)>0 | regexpr("&",pre$location)>0)]<-"Intersection"
pre$location<-gsub("&&"," & ",pre$location)
pre$location<-gsub("&"," & ",pre$location)
pre$location<-gsub("\\s+"," ",pre$location)
pre$location<-gsub("\\s([-])\\s","-",pre$location)
pre$location<-gsub("([-])\\s","-",pre$location)
pre$location<-gsub("\\s([-])","-",pre$location)
building<-pre[pre$type=="Building",]
building$housenum<-substring(building$location,1,regexpr(" ",building$location))
building$st<-substring(building$location,regexpr(" ",building$location)+1,regexpr(",",building$location)-1)
building$boro<-substring(building$location,regexpr(",",building$location)+1,regexpr("$",building$location))
building$boro[which(trim(building$boro)=="QN")]<-"Queens"
building$boro[which(trim(building$boro)=="MN")]<-"Manhattan"
building$boro[which(trim(building$boro)=="BK")]<-"Brooklyn"
building$boro[which(trim(building$boro)=="BX")]<-"Bronx"
building$boro[which(trim(building$boro)=="SI")]<-"Staten Island"
intersection<-pre[pre$type=="Intersection",]
##No Result Error sheet
no_result<-as.data.frame(cbind("","","",""))
colnames(no_result)<-c("id","location","type","result")
no_result<-no_result[0:0,]
##Results for Building sheet
results<-as.data.frame(cbind("","","","","","","","","","","","",""))
colnames(results)<-c("id","location","type","result","bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber","fireCompanyType","firstBoroughName","firstStreetNameNormalized","xCoordinate","yCoordinate")
results<-results[0:0,]
##Results for Intersection
results2<-as.data.frame(cbind("","","","","","","","","","","",""))
colnames(results2)<-c("id","location","type","result","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")
results2<-results2[0:0,]
##BUILDING GEOCODER
if(nrow(building)==0){
print("No Building Address Data")
} else {
for(i in 1:nrow(building)){
print(paste("Buildings: ",round(100*i/nrow(building),1),"%",sep=""))
text<-paste("https://api.cityofnewyork.us/geoclient/v1/address.xml?houseNumber=",trim(building$housenum[i]),"&street=",gsub(" ","+",trim(building$st[i])),"&borough=",gsub(" ","+",trim(building$boro[i])),"&app_id=",app_id,"&app_key=",key,sep="")
data <- xmlParse(getURL(text, ssl.verifypeer = FALSE))
temp<-ldply(xmlToList(data), function(x) { data.frame(x) } )
##BBL and BIN Present, No Coordinate
if( dim(table(colnames(temp)=="bbl"))>1& dim(table(colnames(temp)=="buildingIdentificationNumber"))>1 & dim(table(colnames(temp)=="yCoordinate"))==1){
temp2<-temp[c("bbl","buildingIdentificationNumber")]
temp2<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","geocoded--bbl/bin only",temp2)))
colnames(temp2)<-c("id","location","type","result","bbl","buildingIdentificationNumber")
results<-rbind.fill(results,temp2)
rm(temp,temp2)
print(paste("Geocoded Building ID=",building$id[i],sep=""))
##BBL, BIN, XY Present
} else if( dim(table(colnames(temp)=="bbl"))>1& dim(table(colnames(temp)=="buildingIdentificationNumber"))>1& dim(table(colnames(temp)=="xCoordinate"))>1 & dim(table(colnames(temp)=="yCoordinate"))>1){
temp2<-temp[c("bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized",
"xCoordinate","yCoordinate")]
temp2<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","geocoded",temp2)))
colnames(temp2)<-c("id","location","type","result","bbl","buildingIdentificationNumber","communityDistrict","fireCompanyNumber","fireCompanyType","firstBoroughName","firstStreetNameNormalized","xCoordinate","yCoordinate")
results<-rbind.fill(results,temp2)
rm(temp,temp2)
print(paste("Geocoded Building ID=",building$id[i],sep=""))
##No Result
} else {
temp<-as.data.frame(as.matrix(cbind(building$id[i],paste(trim(building$housenum[i])," ",trim(building$st[i]),", ",trim(building$boro[i]),sep=""),"building","no result")))
colnames(temp)<-c("id","location","type","result")
no_result<-rbind(no_result,temp)
rm(temp)
print(paste("No Result for Building ID=",building$id[i],sep=""))
}
}
}
geocoded_final<-rbind.fill(results,results2,no_result)
##INTERSECTION GEOCODER
if(nrow(intersection)==0){
print("No Intersection Data")
} else {
intersection$street1 <- trim(lapply(strsplit(as.character(intersection$location), "[+-/&]"), "[", 1))
intersection$street2 <- trim(lapply(strsplit(as.character(intersection$location), "[+-/&]"), "[", 2))
intersection$borough <- trim(substring(intersection$location,regexpr(",",intersection$location)+1,regexpr("$",intersection$location)))
for(i in 1:nrow(intersection)){
print(paste("Intersections: ",round(100*i/nrow(building),1),"%",sep=""))
data <- xmlParse(getURL(paste("https://api.cityofnewyork.us/geoclient/v1/intersection.xml?app_id=",app_id,"&app_key=",
key,"&crossStreetOne=",gsub(" ","+",intersection$street1[i]),"&crossStreetTwo=",
gsub(" ","+",intersection$street2[i]),"&borough=",
gsub(" ","+",intersection$borough[i]),sep=""), ssl.verifypeer = FALSE))
temp<-ldply(xmlToList(data), function(x) { data.frame(x) } )
if(ncol(temp)>20&& dim(table(colnames(temp)=="communityDistrict"))>1 && dim(table(colnames(temp)=="yCoordinate"))>1){
temp<-temp[c("communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")]
temp<-as.data.frame(as.matrix(cbind(intersection$id[i],paste(intersection$street1[i]," & ", intersection$street2[i],", ",intersection$borough[i],sep=""),"intersection","geocoded",temp)))
colnames(temp)<-c("id","location","type","result","communityDistrict","fireCompanyNumber",
"fireCompanyType","firstBoroughName","firstStreetNameNormalized","secondStreetNameNormalized",
"xCoordinate","yCoordinate")
results2<-rbind(results2,temp)
rm(temp)
print(paste("Geocoded Intersection ID=",intersection$id[i],sep=""))
} else {
temp<-as.data.frame(as.matrix(cbind(intersection$id[i],paste(intersection$street1[i]," & ", intersection$street2[i],", ",intersection$borough[i],sep=""),"intersection","no result")))
colnames(temp)<-c("id","location","type","result")
no_result<-rbind(no_result,temp)
rm(temp)
print(paste("No Result for Intersection ID=",intersection$id[i],sep=""))
}
}
}
geocoded_final<-rbind.fill(results,results2,no_result)
}
for(i in 91:1000){
print(paste("ITERATION: ",i,sep=""))
team_short<-team[which(team$rand==i),1:2]
temp3<-fd_geocode(team_short,"id","location","89ac2c7c","c394f82e5e39718e2a46a191a7579af2")
values<-rbind.fill(values,temp3)
}
View(temp)
for(i in 91:1000){
tryCatch({
print(i)
print(paste("ITERATION: ",i,sep=""))
team_short<-team[which(team$rand==i),1:2]
temp3<-fd_geocode(team_short,"id","location","89ac2c7c","c394f82e5e39718e2a46a191a7579af2")
values<-rbind.fill(values,temp3)
}, error=function(e){})
}
team_1<-team[1:1,]
values<-fd_geocode(team_1,"id","location","89ac2c7c","c394f82e5e39718e2a46a191a7579af2")
team$rand<-round(runif(nrow(team))*1000,0)
for(i in 0:1000){
tryCatch({
print(i)
print(paste("ITERATION: ",i,sep=""))
team_short<-team[which(team$rand==i),1:2]
temp3<-fd_geocode(team_short,"id","location","89ac2c7c","c394f82e5e39718e2a46a191a7579af2")
values<-rbind.fill(values,temp3)
}, error=function(e){})
}
write.csv(values,"C:/Users/Jeff/Google Drive/ECB_vios_geocode.csv",row.names=F)
write.csv(values,"C:/Users/Jeff/Google Drive/Fire Spread Model/ECB_vios_geocode.csv",row.names=F)
load("C:/Users/Jeff/Google Drive/0001_FireCast3.1/30_Processed_Data/R/5_glm_diag_all.rda")
team_1<-team[1:1,]
values<-fd_geocode(team_1,"id","location","89ac2c7c","c394f82e5e39718e2a46a191a7579af2")
team$rand<-round(runif(nrow(team))*1000,0)
for(i in 0:1000){
tryCatch({
print(i)
print(paste("ITERATION: ",i,sep=""))
team_short<-team[which(team$rand==i),1:2]
temp3<-fd_geocode(team_short,"id","location","89ac2c7c","c394f82e5e39718e2a46a191a7579af2")
values<-rbind.fill(values,temp3)
}, error=function(e){})
}
write.csv(glm_diag,"C:/Users/Jeff/Google Drive/values.csv",row.names=F)
install.packages("rmarkdown")
install.packages(c("leaflet", "bookdown"))
install.packages(c("leaflet", "bookdown", "bea.R"))
setwd("C:/Users/Jeff/Documents/GitHub/econ-visual-guide")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
install.packages("data.table")
beaKey =  readLines("Libraries/Documents/beakey.txt")
beaKey =  readLines("/Libraries/Documents/beakey.txt")
beaKey =  readLines("C:/Ysers/Jeff/Documents/beakey.txt")
beaKey =  readLines("C:/Users/Jeff/Documents/beakey.txt")
setwd("C:/Users/Jeff/Documents/GitHub/econ-visual-guide")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
install.packages("rgdal")
setwd("C:/Users/Jeff/Documents/GitHub/econ-visual-guide")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
setwd("C:/Users/Jeff/Documents/GitHub/econ-visual-guide")
library(bookdown)
bookdown::render_book(list.files(pattern = "*.Rmd"), gitbook(toc_depth = 3))
